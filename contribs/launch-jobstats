#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2011-2015 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of HPCStats.
#
# HPCStats is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with HPCStats. If not, see
# <http://www.gnu.org/licenses/>.
#
# On Calibre systems, the complete text of the GNU General
# Public License can be found in `/usr/share/common-licenses/GPL'.

import sys
import os
import ConfigParser
import logging
import logging.handlers
import paramiko
from socket import gaierror

logger = None
conf = None

def init_logger():
    """Initialize logger to syslog with proper format"""

    global logger

    logger = logging.getLogger('hpcstats')
    logger.setLevel(logging.INFO)
    handler = logging.handlers.SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(name)s: %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

def read_conf():
    """Read configuration file of the script"""

    global logger
    global conf

    conf_file = '/etc/hpcstats/launcher.conf'
    if not os.path.exists(conf_file):
        logger.critical("configuration file %s does not exist", conf_file)
        sys.exit(1)
    conf = ConfigParser.ConfigParser()
    conf.read(conf_file)

def ssh_launch(user, frontend, privkey, script):
    """Launch script through ssh on user@frontend and auth using privkey"""

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(frontend, username=user, key_filename=privkey)
        stdin, stdout, stderr = ssh.exec_command(script)
        ssh.close()
    except gaierror, err:
        logger.critical("socket error on SSH connect to %s: %s",
                        frontend, str(err))
    except IOError, err:
        logger.critical("IO error on SSH connect to %s: %s",
                        frontend, str(err))
    except paramiko.AuthenticationException, err:
        logger.critical("authentication error on SSH connect to %s: %s",
                        frontend, str(err))

def main():
    """Main function of the script"""

    init_logger()
    read_conf()

    clusters_s = conf.get('global', 'clusters')

    clusters = clusters_s.split(',')

    for cluster in clusters:
        logger.info("trying to launch jobstat on %s", cluster)
        user = conf.get(cluster, 'user')
        frontend = conf.get(cluster, 'frontend')
        privkey = conf.get(cluster, 'privkey')
        script = conf.get(cluster, 'script')
        ssh_launch(user, frontend, privkey, script)

if __name__ == '__main__':
    main()
