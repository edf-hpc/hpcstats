SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;
SET search_path = public, pg_catalog;
SET default_tablespace = '';
SET default_with_oids = false;
CREATE TABLE clusters (name character varying(30) NOT NULL);
ALTER TABLE public.clusters OWNER TO postgres;
CREATE TABLE filesystem (id integer NOT NULL,mount_point character varying(30),cluster character varying(30),type character varying(30));
ALTER TABLE public.filesystem OWNER TO postgres;
CREATE TABLE filesystem_usage (fs_id integer NOT NULL,"timestamp" timestamp without time zone NOT NULL,usage real);
ALTER TABLE public.filesystem_usage OWNER TO postgres;
CREATE TABLE job_nodes (job integer NOT NULL,node character varying(30) NOT NULL,cpu_id character varying(30) NOT NULL);
ALTER TABLE public.job_nodes OWNER TO postgres;
CREATE TABLE jobs (id serial NOT NULL,number integer NOT NULL,username character varying(30),groupname character varying(30),submission_datetime timestamp without time zone,running_datetime timestamp without time zone,end_datetime timestamp without time zone,nb_nodes integer,nb_cpus integer);
ALTER TABLE public.jobs OWNER TO postgres;
CREATE TABLE jobs_tmp (id serial NOT NULL,number integer NOT NULL,username character varying(30),groupname character varying(30),submission_datetime timestamp without time zone,running_datetime timestamp without time zone,end_datetime timestamp without time zone,nb_nodes integer,nb_cpus integer);
ALTER TABLE public.jobs_tmp OWNER TO postgres;
CREATE TABLE nodes (name character varying(30) NOT NULL,cluster character varying(30),cpus integer,machine character varying(50),flops bigint);
ALTER TABLE public.nodes OWNER TO postgres;
CREATE TABLE unavailability (node character varying(30) NOT NULL,t_start timestamp without time zone NOT NULL,t_end timestamp without time zone NOT NULL,type character varying(20));
ALTER TABLE public.unavailability OWNER TO postgres;
CREATE TABLE users (name character varying(30) NOT NULL,cluster character varying(30) NOT NULL, groupe character varying(30), creation date,deletion date,uidNumber character varying(30),uid character varying(30));
CREATE TABLE users_tmp (name character varying(30),cluster character varying(30),groupe character varying(30), creation date,deletion date, uidNumber character varying(30),uid character varying(30));
ALTER TABLE public.users_tmp OWNER TO postgres;
ALTER TABLE ONLY clusters ADD CONSTRAINT clusters_pkey PRIMARY KEY (name);
ALTER TABLE ONLY filesystem ADD CONSTRAINT filesystem_pkey PRIMARY KEY (id);
ALTER TABLE ONLY filesystem_usage ADD CONSTRAINT filesystem_usage_pkey PRIMARY KEY (fs_id, "timestamp");
ALTER TABLE ONLY job_nodes ADD CONSTRAINT job_nodes_pkey PRIMARY KEY (job, node, cpu_id);
ALTER TABLE ONLY jobs  ADD CONSTRAINT jobs_pkey PRIMARY KEY (id);
ALTER TABLE ONLY jobs_tmp ADD CONSTRAINT jobs_tmp_pkey PRIMARY KEY (id);
ALTER TABLE ONLY nodes ADD CONSTRAINT nodes_pkey PRIMARY KEY (name);
ALTER TABLE ONLY unavailability ADD CONSTRAINT unavailability_pkey PRIMARY KEY (node, t_start, t_end);
ALTER TABLE ONLY users ADD CONSTRAINT users_name_key UNIQUE (name);
ALTER TABLE ONLY users ADD CONSTRAINT users_pkey PRIMARY KEY (name, cluster);
ALTER TABLE ONLY filesystem ADD CONSTRAINT filesystem_cluster_fkey FOREIGN KEY (cluster) REFERENCES clusters(name);
ALTER TABLE ONLY filesystem_usage ADD CONSTRAINT filesystem_usage_fs_id_fkey FOREIGN KEY (fs_id) REFERENCES filesystem(id);
ALTER TABLE ONLY job_nodes ADD CONSTRAINT job_nodes_job_fkey FOREIGN KEY (job) REFERENCES jobs(id);
ALTER TABLE ONLY job_nodes ADD CONSTRAINT job_nodes_node_fkey FOREIGN KEY (node) REFERENCES nodes(name);
ALTER TABLE ONLY jobs ADD CONSTRAINT jobs_username_fkey FOREIGN KEY (username) REFERENCES users(name);
ALTER TABLE ONLY nodes ADD CONSTRAINT nodes_cluster_fkey FOREIGN KEY (cluster) REFERENCES clusters(name);
ALTER TABLE ONLY unavailability ADD CONSTRAINT unavailability_node_fkey FOREIGN KEY (node) REFERENCES nodes(name);
ALTER TABLE ONLY users ADD CONSTRAINT users_cluster_fkey FOREIGN KEY (cluster) REFERENCES clusters(name);
REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;
